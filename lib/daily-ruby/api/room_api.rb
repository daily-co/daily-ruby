=begin
#Daily

#The official library for communicating with the Daily REST API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module Daily
  class RoomApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new room
    # Creates a new meeting room. The name of the room, privacy settings, and other properties can be specified in the request body. 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomRequest] :room_request A room object
    # @return [RoomResponse]
    def create_room(opts = {})
      data, _status_code, _headers = create_room_with_http_info(opts)
      data
    end

    # Create a new room
    # Creates a new meeting room. The name of the room, privacy settings, and other properties can be specified in the request body. 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomRequest] :room_request A room object
    # @return [Array<(RoomResponse, Integer, Hash)>] RoomResponse data, response status code and response headers
    def create_room_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomApi.create_room ...'
      end
      # resource path
      local_var_path = '/rooms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'room_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RoomResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RoomApi.create_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomApi#create_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete room
    # Delete a Daily room.
    # @param name [String] The room name that needs to be deleted
    # @param [Hash] opts the optional parameters
    # @return [RoomDeletedResponse]
    def delete_room(name, opts = {})
      data, _status_code, _headers = delete_room_with_http_info(name, opts)
      data
    end

    # Delete room
    # Delete a Daily room.
    # @param name [String] The room name that needs to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomDeletedResponse, Integer, Hash)>] RoomDeletedResponse data, response status code and response headers
    def delete_room_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomApi.delete_room ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RoomApi.delete_room"
      end
      # resource path
      local_var_path = '/rooms/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomDeletedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RoomApi.delete_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomApi#delete_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get room
    # Get a Daily room.
    # @param name [String] The room name that needs to be fetched
    # @param [Hash] opts the optional parameters
    # @return [RoomResponse]
    def get_room(name, opts = {})
      data, _status_code, _headers = get_room_with_http_info(name, opts)
      data
    end

    # Get room
    # Get a Daily room.
    # @param name [String] The room name that needs to be fetched
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomResponse, Integer, Hash)>] RoomResponse data, response status code and response headers
    def get_room_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomApi.get_room ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling RoomApi.get_room"
      end
      # resource path
      local_var_path = '/rooms/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RoomApi.get_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomApi#get_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list rooms
    # A GET request to /rooms returns a list of rooms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Integer] :limit The numbers of items to return.
    # @option opts [String] :ending_before A cursor for use in pagination. ending_before is an object ID that defines your place in the list.
    # @option opts [String] :starting_after A cursor for use in pagination. starting_after is an object ID that defines your place in the list.
    # @return [Array<RoomResponse>]
    def get_rooms(opts = {})
      data, _status_code, _headers = get_rooms_with_http_info(opts)
      data
    end

    # Get a list rooms
    # A GET request to /rooms returns a list of rooms.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Integer] :limit The numbers of items to return.
    # @option opts [String] :ending_before A cursor for use in pagination. ending_before is an object ID that defines your place in the list.
    # @option opts [String] :starting_after A cursor for use in pagination. starting_after is an object ID that defines your place in the list.
    # @return [Array<(Array<RoomResponse>, Integer, Hash)>] Array<RoomResponse> data, response status code and response headers
    def get_rooms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomApi.get_rooms ...'
      end
      # resource path
      local_var_path = '/rooms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RoomResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RoomApi.get_rooms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomApi#get_rooms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
