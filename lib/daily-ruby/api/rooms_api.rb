=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Daily
  class RoomsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /rooms
    # Create a room
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRoomRequest] :create_room_request 
    # @return [CreateRoom200Response]
    def create_room(opts = {})
      data, _status_code, _headers = create_room_with_http_info(opts)
      data
    end

    # /rooms
    # Create a room
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRoomRequest] :create_room_request 
    # @return [Array<(CreateRoom200Response, Integer, Hash)>] CreateRoom200Response data, response status code and response headers
    def create_room_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.create_room ...'
      end
      # resource path
      local_var_path = '/rooms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_room_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRoom200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.create_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#create_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name
    # Delete a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_room(room_name, opts = {})
      data, _status_code, _headers = delete_room_with_http_info(room_name, opts)
      data
    end

    # rooms/:name
    # Delete a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_room_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.delete_room ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.delete_room"
      end
      # resource path
      local_var_path = '/rooms/{room_name}'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.delete_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#delete_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/eject
    # Ejects participants from a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EjectRequest] :eject_request 
    # @return [Eject200Response]
    def eject(room_name, opts = {})
      data, _status_code, _headers = eject_with_http_info(room_name, opts)
      data
    end

    # rooms/:name/eject
    # Ejects participants from a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EjectRequest] :eject_request 
    # @return [Array<(Eject200Response, Integer, Hash)>] Eject200Response data, response status code and response headers
    def eject_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.eject ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.eject"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/eject'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'eject_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Eject200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.eject",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#eject\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name
    # Get info about a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [RoomsRoomNameGetRes]
    def get_room_config(room_name, opts = {})
      data, _status_code, _headers = get_room_config_with_http_info(room_name, opts)
      data
    end

    # rooms/:name
    # Get info about a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomsRoomNameGetRes, Integer, Hash)>] RoomsRoomNameGetRes data, response status code and response headers
    def get_room_config_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.get_room_config ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.get_room_config"
      end
      # resource path
      local_var_path = '/rooms/{room_name}'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomsRoomNameGetRes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.get_room_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#get_room_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/presence
    # Get a presence snapshot for a room
    # @param room_name [String] The name of the room
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Sets the number of participants returned.
    # @option opts [String] :user_id Returns presence for the user with the given userId, if available. The userId is specified via a [meeting token](/reference/rest-api/meeting-tokens/config#user_id).
    # @option opts [String] :user_name Returns presence for the user with the given name, if available.
    # @return [RoomsRoomNamePresenceGetRes]
    def get_room_presence(room_name, opts = {})
      data, _status_code, _headers = get_room_presence_with_http_info(room_name, opts)
      data
    end

    # rooms/:name/presence
    # Get a presence snapshot for a room
    # @param room_name [String] The name of the room
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Sets the number of participants returned.
    # @option opts [String] :user_id Returns presence for the user with the given userId, if available. The userId is specified via a [meeting token](/reference/rest-api/meeting-tokens/config#user_id).
    # @option opts [String] :user_name Returns presence for the user with the given name, if available.
    # @return [Array<(RoomsRoomNamePresenceGetRes, Integer, Hash)>] RoomsRoomNamePresenceGetRes data, response status code and response headers
    def get_room_presence_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.get_room_presence ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.get_room_presence"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/presence'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'userName'] = opts[:'user_name'] if !opts[:'user_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomsRoomNamePresenceGetRes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.get_room_presence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#get_room_presence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/get-session-data
    # Gets meeting session data
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_session_data(room_name, opts = {})
      get_session_data_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/get-session-data
    # Gets meeting session data
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_session_data_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.get_session_data ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.get_session_data"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/get-session-data'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.get_session_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#get_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /rooms
    # List rooms
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Sets the number of rooms listed
    # @option opts [String] :ending_before Returns room objects created before a provided room  id
    # @option opts [String] :starting_after Returns room objects created after a provided room id
    # @return [ListRooms200Response]
    def list_rooms(opts = {})
      data, _status_code, _headers = list_rooms_with_http_info(opts)
      data
    end

    # /rooms
    # List rooms
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Sets the number of rooms listed
    # @option opts [String] :ending_before Returns room objects created before a provided room  id
    # @option opts [String] :starting_after Returns room objects created after a provided room id
    # @return [Array<(ListRooms200Response, Integer, Hash)>] ListRooms200Response data, response status code and response headers
    def list_rooms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.list_rooms ...'
      end
      # resource path
      local_var_path = '/rooms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListRooms200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.list_rooms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#list_rooms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/dialOut/sendDTMF
    # send DTMF digits on the dialout
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomDialOutSendDTMFRequest] :room_dial_out_send_dtmf_request 
    # @return [nil]
    def room_dial_out_send_dtmf(room_name, opts = {})
      room_dial_out_send_dtmf_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/dialOut/sendDTMF
    # send DTMF digits on the dialout
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomDialOutSendDTMFRequest] :room_dial_out_send_dtmf_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_dial_out_send_dtmf_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_dial_out_send_dtmf ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_dial_out_send_dtmf"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/dialOut/sendDTMF'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'room_dial_out_send_dtmf_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_dial_out_send_dtmf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_dial_out_send_dtmf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/dialOut/start
    # Start a dial-out in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DialoutProperties] :dialout_properties 
    # @return [nil]
    def room_dial_out_start(room_name, opts = {})
      room_dial_out_start_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/dialOut/start
    # Start a dial-out in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DialoutProperties] :dialout_properties 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_dial_out_start_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_dial_out_start ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_dial_out_start"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/dialOut/start'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'dialout_properties'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_dial_out_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_dial_out_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/dialOut/stop
    # Stop a dial out in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomDialOutStopRequest] :room_dial_out_stop_request 
    # @return [nil]
    def room_dial_out_stop(room_name, opts = {})
      room_dial_out_stop_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/dialOut/stop
    # Stop a dial out in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomDialOutStopRequest] :room_dial_out_stop_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_dial_out_stop_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_dial_out_stop ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_dial_out_stop"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/dialOut/stop'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'room_dial_out_stop_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_dial_out_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_dial_out_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/live-streaming/start
    # Start a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyLiveStreamingOptions] :daily_live_streaming_options 
    # @return [nil]
    def room_livestreaming_start(room_name, opts = {})
      room_livestreaming_start_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/live-streaming/start
    # Start a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyLiveStreamingOptions] :daily_live_streaming_options 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_livestreaming_start_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_livestreaming_start ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_livestreaming_start"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/live-streaming/start'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'daily_live_streaming_options'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_livestreaming_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_livestreaming_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/live-streaming/stop
    # Stop a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def room_livestreaming_stop(room_name, opts = {})
      room_livestreaming_stop_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/live-streaming/stop
    # Stop a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_livestreaming_stop_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_livestreaming_stop ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_livestreaming_stop"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/live-streaming/stop'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_livestreaming_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_livestreaming_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/live-streaming/update
    # Update a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyLiveStreamingOptions] :daily_live_streaming_options 
    # @return [nil]
    def room_livestreaming_update(room_name, opts = {})
      room_livestreaming_update_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/live-streaming/update
    # Update a live stream in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyLiveStreamingOptions] :daily_live_streaming_options 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_livestreaming_update_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_livestreaming_update ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_livestreaming_update"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/live-streaming/update'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'daily_live_streaming_options'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_livestreaming_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_livestreaming_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/recordings/start
    # Start a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RecordingStreamingOptions] :recording_streaming_options 
    # @return [nil]
    def room_recordings_start(room_name, opts = {})
      room_recordings_start_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/recordings/start
    # Start a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RecordingStreamingOptions] :recording_streaming_options 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_recordings_start_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_recordings_start ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_recordings_start"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/recordings/start'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'recording_streaming_options'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_recordings_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_recordings_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/recordings/stop
    # Stop a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def room_recordings_stop(room_name, opts = {})
      room_recordings_stop_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/recordings/stop
    # Stop a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_recordings_stop_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_recordings_stop ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_recordings_stop"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/recordings/stop'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_recordings_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_recordings_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/recordings/update
    # Update a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyStreamingOptions] :daily_streaming_options 
    # @return [nil]
    def room_recordings_update(room_name, opts = {})
      room_recordings_update_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/recordings/update
    # Update a recording in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DailyStreamingOptions] :daily_streaming_options 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_recordings_update_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_recordings_update ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_recordings_update"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/recordings/update'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'daily_streaming_options'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_recordings_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_recordings_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/sipCallTransfer
    # transfer sip/pstn call
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomSipCallTransferRequest] :room_sip_call_transfer_request 
    # @return [nil]
    def room_sip_call_transfer(room_name, opts = {})
      room_sip_call_transfer_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/sipCallTransfer
    # transfer sip/pstn call
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomSipCallTransferRequest] :room_sip_call_transfer_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_sip_call_transfer_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_sip_call_transfer ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_sip_call_transfer"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/sipCallTransfer'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'room_sip_call_transfer_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_sip_call_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_sip_call_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/sipRefer
    # refer a sip call to other sip endpoint
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomSipCallTransferRequest] :room_sip_call_transfer_request 
    # @return [Object]
    def room_sip_refer(room_name, opts = {})
      data, _status_code, _headers = room_sip_refer_with_http_info(room_name, opts)
      data
    end

    # rooms/:name/sipRefer
    # refer a sip call to other sip endpoint
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RoomSipCallTransferRequest] :room_sip_call_transfer_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def room_sip_refer_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_sip_refer ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_sip_refer"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/sipRefer'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'room_sip_call_transfer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_sip_refer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_sip_refer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/transcription/start
    # Start a transcription in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [TranscriptionProperties] :transcription_properties 
    # @return [nil]
    def room_transcription_start(room_name, opts = {})
      room_transcription_start_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/transcription/start
    # Start a transcription in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [TranscriptionProperties] :transcription_properties 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_transcription_start_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_transcription_start ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_transcription_start"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/transcription/start'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'transcription_properties'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_transcription_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_transcription_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/transcription/stop
    # Stop a transcription in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def room_transcription_stop(room_name, opts = {})
      room_transcription_stop_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/transcription/stop
    # Stop a transcription in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def room_transcription_stop_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.room_transcription_stop ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.room_transcription_stop"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/transcription/stop'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.room_transcription_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#room_transcription_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/send-app-message
    # Send a message to participants in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendAppMessageRequest] :send_app_message_request 
    # @return [nil]
    def send_app_message(room_name, opts = {})
      send_app_message_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/send-app-message
    # Send a message to participants in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendAppMessageRequest] :send_app_message_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_app_message_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.send_app_message ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.send_app_message"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/send-app-message'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'send_app_message_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.send_app_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#send_app_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name
    # Set a room's privacy and config properties
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetRoomConfigRequest] :set_room_config_request 
    # @return [nil]
    def set_room_config(room_name, opts = {})
      set_room_config_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name
    # Set a room&#39;s privacy and config properties
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetRoomConfigRequest] :set_room_config_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_room_config_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.set_room_config ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.set_room_config"
      end
      # resource path
      local_var_path = '/rooms/{room_name}'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_room_config_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.set_room_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#set_room_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/set-session-data
    # Sets meeting session data
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetSessionDataRequest] :set_session_data_request 
    # @return [nil]
    def set_session_data(room_name, opts = {})
      set_session_data_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/set-session-data
    # Sets meeting session data
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetSessionDataRequest] :set_session_data_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_session_data_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.set_session_data ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.set_session_data"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/set-session-data'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_session_data_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.set_session_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#set_session_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # rooms/:name/update-permissions
    # Modifies permissions for one or more participants in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePermissionsRequest] :update_permissions_request 
    # @return [nil]
    def update_permissions(room_name, opts = {})
      update_permissions_with_http_info(room_name, opts)
      nil
    end

    # rooms/:name/update-permissions
    # Modifies permissions for one or more participants in a room
    # @param room_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePermissionsRequest] :update_permissions_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_permissions_with_http_info(room_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoomsApi.update_permissions ...'
      end
      # verify the required parameter 'room_name' is set
      if @api_client.config.client_side_validation && room_name.nil?
        fail ArgumentError, "Missing the required parameter 'room_name' when calling RoomsApi.update_permissions"
      end
      # resource path
      local_var_path = '/rooms/{room_name}/update-permissions'.sub('{' + 'room_name' + '}', CGI.escape(room_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_permissions_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RoomsApi.update_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoomsApi#update_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
