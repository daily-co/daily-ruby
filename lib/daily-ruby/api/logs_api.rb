=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module Daily
  class LogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /logs/api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starting_after Given the log ID, will return all records after that ID. See [pagination docs](../../rest-api#pagination)
    # @option opts [String] :ending_before Given the log ID, will return all records before that ID. See [pagination docs](../../rest-api#pagination)
    # @option opts [Integer] :limit Limit the number of logs and/or metrics returned (default to 20)
    # @option opts [String] :source The source of the given logs, either &#x60;\&quot;api\&quot;&#x60; or &#x60;\&quot;webhook\&quot;&#x60; (default to '\"api\"')
    # @option opts [String] :url Either the webhook server URL, or the API endpoint that was logged
    # @return [ListAPILogs200Response]
    def list_api_logs(opts = {})
      data, _status_code, _headers = list_api_logs_with_http_info(opts)
      data
    end

    # /logs/api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :starting_after Given the log ID, will return all records after that ID. See [pagination docs](../../rest-api#pagination)
    # @option opts [String] :ending_before Given the log ID, will return all records before that ID. See [pagination docs](../../rest-api#pagination)
    # @option opts [Integer] :limit Limit the number of logs and/or metrics returned (default to 20)
    # @option opts [String] :source The source of the given logs, either &#x60;\&quot;api\&quot;&#x60; or &#x60;\&quot;webhook\&quot;&#x60; (default to '\"api\"')
    # @option opts [String] :url Either the webhook server URL, or the API endpoint that was logged
    # @return [Array<(ListAPILogs200Response, Integer, Hash)>] ListAPILogs200Response data, response status code and response headers
    def list_api_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsApi.list_api_logs ...'
      end
      # resource path
      local_var_path = '/logs/api'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAPILogs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"LogsApi.list_api_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#list_api_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /logs
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_logs If true, you get a \&quot;logs\&quot; array in the results (default to true)
    # @option opts [Boolean] :include_metrics If true, results have \&quot;metrics\&quot; array (default to false)
    # @option opts [String] :user_session_id Filters by this user ID (aka \&quot;participant ID\&quot;). Required if &#x60;mtgSessionId&#x60; is not present in the request
    # @option opts [String] :mtg_session_id Filters by this Session ID. Required if &#x60;userSessionId&#x60; is not present in the request
    # @option opts [String] :log_level Filters by the given log level name
    # @option opts [String] :order ASC or DESC, case insensitive (default to 'DESC')
    # @option opts [Integer] :start_time A JS timestamp (ms since epoch in UTC)
    # @option opts [Integer] :end_time A JS timestamp (ms since epoch), defaults to the current time
    # @option opts [Integer] :limit Limit the number of logs and/or metrics returned (default to 20)
    # @option opts [Integer] :offset Number of records to skip before returning results (default to 0)
    # @return [Object]
    def list_logs(opts = {})
      data, _status_code, _headers = list_logs_with_http_info(opts)
      data
    end

    # /logs
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_logs If true, you get a \&quot;logs\&quot; array in the results (default to true)
    # @option opts [Boolean] :include_metrics If true, results have \&quot;metrics\&quot; array (default to false)
    # @option opts [String] :user_session_id Filters by this user ID (aka \&quot;participant ID\&quot;). Required if &#x60;mtgSessionId&#x60; is not present in the request
    # @option opts [String] :mtg_session_id Filters by this Session ID. Required if &#x60;userSessionId&#x60; is not present in the request
    # @option opts [String] :log_level Filters by the given log level name
    # @option opts [String] :order ASC or DESC, case insensitive (default to 'DESC')
    # @option opts [Integer] :start_time A JS timestamp (ms since epoch in UTC)
    # @option opts [Integer] :end_time A JS timestamp (ms since epoch), defaults to the current time
    # @option opts [Integer] :limit Limit the number of logs and/or metrics returned (default to 20)
    # @option opts [Integer] :offset Number of records to skip before returning results (default to 0)
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def list_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsApi.list_logs ...'
      end
      allowable_values = ["ERROR", "INFO", "DEBUG"]
      if @api_client.config.client_side_validation && opts[:'log_level'] && !allowable_values.include?(opts[:'log_level'])
        fail ArgumentError, "invalid value for \"log_level\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/logs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeLogs'] = opts[:'include_logs'] if !opts[:'include_logs'].nil?
      query_params[:'includeMetrics'] = opts[:'include_metrics'] if !opts[:'include_metrics'].nil?
      query_params[:'userSessionId'] = opts[:'user_session_id'] if !opts[:'user_session_id'].nil?
      query_params[:'mtgSessionId'] = opts[:'mtg_session_id'] if !opts[:'mtg_session_id'].nil?
      query_params[:'logLevel'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"LogsApi.list_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#list_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
