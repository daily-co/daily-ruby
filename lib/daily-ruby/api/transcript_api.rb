=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Daily
  class TranscriptApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # transcript/:id
    # Delete a transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteTranscript200Response]
    def delete_transcript(transcript_id, opts = {})
      data, _status_code, _headers = delete_transcript_with_http_info(transcript_id, opts)
      data
    end

    # transcript/:id
    # Delete a transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteTranscript200Response, Integer, Hash)>] DeleteTranscript200Response data, response status code and response headers
    def delete_transcript_with_http_info(transcript_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptApi.delete_transcript ...'
      end
      # verify the required parameter 'transcript_id' is set
      if @api_client.config.client_side_validation && transcript_id.nil?
        fail ArgumentError, "Missing the required parameter 'transcript_id' when calling TranscriptApi.delete_transcript"
      end
      # resource path
      local_var_path = '/transcript/{transcriptId}'.sub('{' + 'transcriptId' + '}', CGI.escape(transcript_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteTranscript200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"TranscriptApi.delete_transcript",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptApi#delete_transcript\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # transcript/:transcriptId
    # Get info about a Transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetTranscriptInfo200Response]
    def get_transcript_info(transcript_id, opts = {})
      data, _status_code, _headers = get_transcript_info_with_http_info(transcript_id, opts)
      data
    end

    # transcript/:transcriptId
    # Get info about a Transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTranscriptInfo200Response, Integer, Hash)>] GetTranscriptInfo200Response data, response status code and response headers
    def get_transcript_info_with_http_info(transcript_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptApi.get_transcript_info ...'
      end
      # verify the required parameter 'transcript_id' is set
      if @api_client.config.client_side_validation && transcript_id.nil?
        fail ArgumentError, "Missing the required parameter 'transcript_id' when calling TranscriptApi.get_transcript_info"
      end
      # resource path
      local_var_path = '/transcript/{transcriptId}'.sub('{' + 'transcriptId' + '}', CGI.escape(transcript_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTranscriptInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"TranscriptApi.get_transcript_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptApi#get_transcript_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # transcript/:id/access-link
    # Generate an access link for a transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetTranscriptLink200Response]
    def get_transcript_link(transcript_id, opts = {})
      data, _status_code, _headers = get_transcript_link_with_http_info(transcript_id, opts)
      data
    end

    # transcript/:id/access-link
    # Generate an access link for a transcript
    # @param transcript_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTranscriptLink200Response, Integer, Hash)>] GetTranscriptLink200Response data, response status code and response headers
    def get_transcript_link_with_http_info(transcript_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptApi.get_transcript_link ...'
      end
      # verify the required parameter 'transcript_id' is set
      if @api_client.config.client_side_validation && transcript_id.nil?
        fail ArgumentError, "Missing the required parameter 'transcript_id' when calling TranscriptApi.get_transcript_link"
      end
      # resource path
      local_var_path = '/transcript/{transcriptId}/access-link'.sub('{' + 'transcriptId' + '}', CGI.escape(transcript_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTranscriptLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"TranscriptApi.get_transcript_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptApi#get_transcript_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /transcript
    # List transcripts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :ending_before 
    # @option opts [String] :starting_after 
    # @option opts [String] :room_id 
    # @option opts [String] :mtg_session_id 
    # @return [ListTranscript200Response]
    def list_transcript(opts = {})
      data, _status_code, _headers = list_transcript_with_http_info(opts)
      data
    end

    # /transcript
    # List transcripts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :ending_before 
    # @option opts [String] :starting_after 
    # @option opts [String] :room_id 
    # @option opts [String] :mtg_session_id 
    # @return [Array<(ListTranscript200Response, Integer, Hash)>] ListTranscript200Response data, response status code and response headers
    def list_transcript_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TranscriptApi.list_transcript ...'
      end
      # resource path
      local_var_path = '/transcript'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'roomId'] = opts[:'room_id'] if !opts[:'room_id'].nil?
      query_params[:'mtgSessionId'] = opts[:'mtg_session_id'] if !opts[:'mtg_session_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTranscript200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"TranscriptApi.list_transcript",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TranscriptApi#list_transcript\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
