=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module Daily
  class MeetingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /meetings/:meeting
    # retrieve info about a particular meeting
    # @param meeting [String] the ID of the meeting session
    # @param [Hash] opts the optional parameters
    # @return [MeetingsMeetingGetRes]
    def get_individual_meeting_info(meeting, opts = {})
      data, _status_code, _headers = get_individual_meeting_info_with_http_info(meeting, opts)
      data
    end

    # /meetings/:meeting
    # retrieve info about a particular meeting
    # @param meeting [String] the ID of the meeting session
    # @param [Hash] opts the optional parameters
    # @return [Array<(MeetingsMeetingGetRes, Integer, Hash)>] MeetingsMeetingGetRes data, response status code and response headers
    def get_individual_meeting_info_with_http_info(meeting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.get_individual_meeting_info ...'
      end
      # verify the required parameter 'meeting' is set
      if @api_client.config.client_side_validation && meeting.nil?
        fail ArgumentError, "Missing the required parameter 'meeting' when calling MeetingsApi.get_individual_meeting_info"
      end
      # resource path
      local_var_path = '/meetings/{meeting}'.sub('{' + 'meeting' + '}', CGI.escape(meeting.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MeetingsMeetingGetRes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"MeetingsApi.get_individual_meeting_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#get_individual_meeting_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /meetings
    # retrieve meeting analytics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room 
    # @option opts [Integer] :timeframe_start 
    # @option opts [Integer] :timeframe_end 
    # @option opts [Integer] :limit 
    # @option opts [String] :starting_after 
    # @option opts [String] :ending_before 
    # @option opts [Boolean] :ongoing 
    # @option opts [Boolean] :no_participants 
    # @return [GetMeetingInfo200Response]
    def get_meeting_info(opts = {})
      data, _status_code, _headers = get_meeting_info_with_http_info(opts)
      data
    end

    # /meetings
    # retrieve meeting analytics
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room 
    # @option opts [Integer] :timeframe_start 
    # @option opts [Integer] :timeframe_end 
    # @option opts [Integer] :limit 
    # @option opts [String] :starting_after 
    # @option opts [String] :ending_before 
    # @option opts [Boolean] :ongoing 
    # @option opts [Boolean] :no_participants 
    # @return [Array<(GetMeetingInfo200Response, Integer, Hash)>] GetMeetingInfo200Response data, response status code and response headers
    def get_meeting_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.get_meeting_info ...'
      end
      # resource path
      local_var_path = '/meetings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'room'] = opts[:'room'] if !opts[:'room'].nil?
      query_params[:'timeframe_start'] = opts[:'timeframe_start'] if !opts[:'timeframe_start'].nil?
      query_params[:'timeframe_end'] = opts[:'timeframe_end'] if !opts[:'timeframe_end'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'ongoing'] = opts[:'ongoing'] if !opts[:'ongoing'].nil?
      query_params[:'no_participants'] = opts[:'no_participants'] if !opts[:'no_participants'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMeetingInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"MeetingsApi.get_meeting_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#get_meeting_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /meetings/:meeting/participants
    # retrieve info about the participants in a particular meeting
    # @param meeting [String] the ID of the meeting session
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit the largest number of participant records to return
    # @option opts [String] :joined_after limit to participants who joined after the given participant, identified by &#x60;participant_id&#x60;
    # @option opts [String] :joined_before limit to participants who joined before the given participant, identified by &#x60;participant_id&#x60;
    # @return [MeetingParticipantsGetRes]
    def get_meeting_participants(meeting, opts = {})
      data, _status_code, _headers = get_meeting_participants_with_http_info(meeting, opts)
      data
    end

    # /meetings/:meeting/participants
    # retrieve info about the participants in a particular meeting
    # @param meeting [String] the ID of the meeting session
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit the largest number of participant records to return
    # @option opts [String] :joined_after limit to participants who joined after the given participant, identified by &#x60;participant_id&#x60;
    # @option opts [String] :joined_before limit to participants who joined before the given participant, identified by &#x60;participant_id&#x60;
    # @return [Array<(MeetingParticipantsGetRes, Integer, Hash)>] MeetingParticipantsGetRes data, response status code and response headers
    def get_meeting_participants_with_http_info(meeting, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeetingsApi.get_meeting_participants ...'
      end
      # verify the required parameter 'meeting' is set
      if @api_client.config.client_side_validation && meeting.nil?
        fail ArgumentError, "Missing the required parameter 'meeting' when calling MeetingsApi.get_meeting_participants"
      end
      # resource path
      local_var_path = '/meetings/{meeting}/participants'.sub('{' + 'meeting' + '}', CGI.escape(meeting.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'joined_after'] = opts[:'joined_after'] if !opts[:'joined_after'].nil?
      query_params[:'joined_before'] = opts[:'joined_before'] if !opts[:'joined_before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MeetingParticipantsGetRes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"MeetingsApi.get_meeting_participants",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeetingsApi#get_meeting_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
