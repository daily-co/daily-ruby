=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Daily
  class BatchRoomsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # /batch/rooms
    # Create rooms in bulk
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRoomCreateRequest] :batch_room_create_request 
    # @return [Array<RoomsRoomNameGetRes>]
    def batch_room_create(opts = {})
      data, _status_code, _headers = batch_room_create_with_http_info(opts)
      data
    end

    # /batch/rooms
    # Create rooms in bulk
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRoomCreateRequest] :batch_room_create_request 
    # @return [Array<(Array<RoomsRoomNameGetRes>, Integer, Hash)>] Array<RoomsRoomNameGetRes> data, response status code and response headers
    def batch_room_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchRoomsApi.batch_room_create ...'
      end
      # resource path
      local_var_path = '/batch/rooms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_room_create_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RoomsRoomNameGetRes>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"BatchRoomsApi.batch_room_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchRoomsApi#batch_room_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /batch/rooms
    # Delete rooms in bulk
    # @param [Hash] opts the optional parameters
    # @return [BatchRoomDelete200Response]
    def batch_room_delete(opts = {})
      data, _status_code, _headers = batch_room_delete_with_http_info(opts)
      data
    end

    # /batch/rooms
    # Delete rooms in bulk
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchRoomDelete200Response, Integer, Hash)>] BatchRoomDelete200Response data, response status code and response headers
    def batch_room_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchRoomsApi.batch_room_delete ...'
      end
      # resource path
      local_var_path = '/batch/rooms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchRoomDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"BatchRoomsApi.batch_room_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchRoomsApi#batch_room_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
