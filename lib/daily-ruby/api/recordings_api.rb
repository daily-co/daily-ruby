=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module Daily
  class RecordingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # recordings/:id
    # Delete a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_recording(recording_id, opts = {})
      data, _status_code, _headers = delete_recording_with_http_info(recording_id, opts)
      data
    end

    # recordings/:id
    # Delete a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_recording_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.delete_recording ...'
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.delete_recording"
      end
      # resource path
      local_var_path = '/recordings/{recording_id}'.sub('{' + 'recording_id' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RecordingsApi.delete_recording",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#delete_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # recordings/:id
    # Get info about a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetRecordingInfo200Response]
    def get_recording_info(recording_id, opts = {})
      data, _status_code, _headers = get_recording_info_with_http_info(recording_id, opts)
      data
    end

    # recordings/:id
    # Get info about a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecordingInfo200Response, Integer, Hash)>] GetRecordingInfo200Response data, response status code and response headers
    def get_recording_info_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.get_recording_info ...'
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.get_recording_info"
      end
      # resource path
      local_var_path = '/recordings/{recording_id}'.sub('{' + 'recording_id' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecordingInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RecordingsApi.get_recording_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#get_recording_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # recordings/:id/access-link
    # Generate an access link for a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetRecordingLink200Response]
    def get_recording_link(recording_id, opts = {})
      data, _status_code, _headers = get_recording_link_with_http_info(recording_id, opts)
      data
    end

    # recordings/:id/access-link
    # Generate an access link for a recording
    # @param recording_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecordingLink200Response, Integer, Hash)>] GetRecordingLink200Response data, response status code and response headers
    def get_recording_link_with_http_info(recording_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.get_recording_link ...'
      end
      # verify the required parameter 'recording_id' is set
      if @api_client.config.client_side_validation && recording_id.nil?
        fail ArgumentError, "Missing the required parameter 'recording_id' when calling RecordingsApi.get_recording_link"
      end
      # resource path
      local_var_path = '/recordings/{recording_id}/access-link'.sub('{' + 'recording_id' + '}', CGI.escape(recording_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecordingLink200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RecordingsApi.get_recording_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#get_recording_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # /recordings
    # List recordings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :ending_before 
    # @option opts [String] :starting_after 
    # @option opts [String] :room_name 
    # @return [ListRecordings200Response]
    def list_recordings(opts = {})
      data, _status_code, _headers = list_recordings_with_http_info(opts)
      data
    end

    # /recordings
    # List recordings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [String] :ending_before 
    # @option opts [String] :starting_after 
    # @option opts [String] :room_name 
    # @return [Array<(ListRecordings200Response, Integer, Hash)>] ListRecordings200Response data, response status code and response headers
    def list_recordings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecordingsApi.list_recordings ...'
      end
      # resource path
      local_var_path = '/recordings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ending_before'] = opts[:'ending_before'] if !opts[:'ending_before'].nil?
      query_params[:'starting_after'] = opts[:'starting_after'] if !opts[:'starting_after'].nil?
      query_params[:'room_name'] = opts[:'room_name'] if !opts[:'room_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListRecordings200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['sec0']

      new_options = opts.merge(
        :operation => :"RecordingsApi.list_recordings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecordingsApi#list_recordings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
