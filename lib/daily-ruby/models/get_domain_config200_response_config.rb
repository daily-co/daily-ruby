=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Daily
  class GetDomainConfig200ResponseConfig
    attr_accessor :hide_daily_branding

    attr_accessor :redirect_on_meeting_exit

    attr_accessor :meeting_join_hook

    attr_accessor :hipaa

    attr_accessor :intercom_auto_record

    attr_accessor :intercom_manual_record

    attr_accessor :sfu_impl

    attr_accessor :sfu_switchover

    attr_accessor :switchover_impl

    attr_accessor :lang

    attr_accessor :webhook_meeting_end

    attr_accessor :recordings_bucket

    attr_accessor :max_live_streams

    attr_accessor :max_streaming_instances_per_room

    attr_accessor :enable_daily_logger

    attr_accessor :enable_prejoin_ui

    attr_accessor :enable_live_captions_ui

    attr_accessor :enable_network_ui

    attr_accessor :disable_rate_limiting

    attr_accessor :attach_callobject_to_window

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hide_daily_branding' => :'hide_daily_branding',
        :'redirect_on_meeting_exit' => :'redirect_on_meeting_exit',
        :'meeting_join_hook' => :'meeting_join_hook',
        :'hipaa' => :'hipaa',
        :'intercom_auto_record' => :'intercom_auto_record',
        :'intercom_manual_record' => :'intercom_manual_record',
        :'sfu_impl' => :'sfu_impl',
        :'sfu_switchover' => :'sfu_switchover',
        :'switchover_impl' => :'switchover_impl',
        :'lang' => :'lang',
        :'webhook_meeting_end' => :'webhook_meeting_end',
        :'recordings_bucket' => :'recordings_bucket',
        :'max_live_streams' => :'max_live_streams',
        :'max_streaming_instances_per_room' => :'max_streaming_instances_per_room',
        :'enable_daily_logger' => :'enable_daily_logger',
        :'enable_prejoin_ui' => :'enable_prejoin_ui',
        :'enable_live_captions_ui' => :'enable_live_captions_ui',
        :'enable_network_ui' => :'enable_network_ui',
        :'disable_rate_limiting' => :'disable_rate_limiting',
        :'attach_callobject_to_window' => :'attach_callobject_to_window'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'hide_daily_branding' => :'Boolean',
        :'redirect_on_meeting_exit' => :'String',
        :'meeting_join_hook' => :'String',
        :'hipaa' => :'Boolean',
        :'intercom_auto_record' => :'Boolean',
        :'intercom_manual_record' => :'String',
        :'sfu_impl' => :'String',
        :'sfu_switchover' => :'Integer',
        :'switchover_impl' => :'String',
        :'lang' => :'String',
        :'webhook_meeting_end' => :'String',
        :'recordings_bucket' => :'GetDomainConfig200ResponseConfigRecordingsBucket',
        :'max_live_streams' => :'Float',
        :'max_streaming_instances_per_room' => :'Float',
        :'enable_daily_logger' => :'Boolean',
        :'enable_prejoin_ui' => :'Boolean',
        :'enable_live_captions_ui' => :'Boolean',
        :'enable_network_ui' => :'Boolean',
        :'disable_rate_limiting' => :'Boolean',
        :'attach_callobject_to_window' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Daily::GetDomainConfig200ResponseConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Daily::GetDomainConfig200ResponseConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'hide_daily_branding')
        self.hide_daily_branding = attributes[:'hide_daily_branding']
      end

      if attributes.key?(:'redirect_on_meeting_exit')
        self.redirect_on_meeting_exit = attributes[:'redirect_on_meeting_exit']
      end

      if attributes.key?(:'meeting_join_hook')
        self.meeting_join_hook = attributes[:'meeting_join_hook']
      end

      if attributes.key?(:'hipaa')
        self.hipaa = attributes[:'hipaa']
      end

      if attributes.key?(:'intercom_auto_record')
        self.intercom_auto_record = attributes[:'intercom_auto_record']
      end

      if attributes.key?(:'intercom_manual_record')
        self.intercom_manual_record = attributes[:'intercom_manual_record']
      end

      if attributes.key?(:'sfu_impl')
        self.sfu_impl = attributes[:'sfu_impl']
      end

      if attributes.key?(:'sfu_switchover')
        self.sfu_switchover = attributes[:'sfu_switchover']
      end

      if attributes.key?(:'switchover_impl')
        self.switchover_impl = attributes[:'switchover_impl']
      end

      if attributes.key?(:'lang')
        self.lang = attributes[:'lang']
      end

      if attributes.key?(:'webhook_meeting_end')
        self.webhook_meeting_end = attributes[:'webhook_meeting_end']
      end

      if attributes.key?(:'recordings_bucket')
        self.recordings_bucket = attributes[:'recordings_bucket']
      end

      if attributes.key?(:'max_live_streams')
        self.max_live_streams = attributes[:'max_live_streams']
      end

      if attributes.key?(:'max_streaming_instances_per_room')
        self.max_streaming_instances_per_room = attributes[:'max_streaming_instances_per_room']
      end

      if attributes.key?(:'enable_daily_logger')
        self.enable_daily_logger = attributes[:'enable_daily_logger']
      end

      if attributes.key?(:'enable_prejoin_ui')
        self.enable_prejoin_ui = attributes[:'enable_prejoin_ui']
      end

      if attributes.key?(:'enable_live_captions_ui')
        self.enable_live_captions_ui = attributes[:'enable_live_captions_ui']
      end

      if attributes.key?(:'enable_network_ui')
        self.enable_network_ui = attributes[:'enable_network_ui']
      end

      if attributes.key?(:'disable_rate_limiting')
        self.disable_rate_limiting = attributes[:'disable_rate_limiting']
      end

      if attributes.key?(:'attach_callobject_to_window')
        self.attach_callobject_to_window = attributes[:'attach_callobject_to_window']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@sfu_impl.nil? && @sfu_impl.to_s.length < 1
        invalid_properties.push('invalid value for "sfu_impl", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@sfu_impl.nil? && @sfu_impl.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] sfu_impl Value to be assigned
    def sfu_impl=(sfu_impl)
      if sfu_impl.nil?
        fail ArgumentError, 'sfu_impl cannot be nil'
      end

      if sfu_impl.to_s.length < 1
        fail ArgumentError, 'invalid value for "sfu_impl", the character length must be great than or equal to 1.'
      end

      @sfu_impl = sfu_impl
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hide_daily_branding == o.hide_daily_branding &&
          redirect_on_meeting_exit == o.redirect_on_meeting_exit &&
          meeting_join_hook == o.meeting_join_hook &&
          hipaa == o.hipaa &&
          intercom_auto_record == o.intercom_auto_record &&
          intercom_manual_record == o.intercom_manual_record &&
          sfu_impl == o.sfu_impl &&
          sfu_switchover == o.sfu_switchover &&
          switchover_impl == o.switchover_impl &&
          lang == o.lang &&
          webhook_meeting_end == o.webhook_meeting_end &&
          recordings_bucket == o.recordings_bucket &&
          max_live_streams == o.max_live_streams &&
          max_streaming_instances_per_room == o.max_streaming_instances_per_room &&
          enable_daily_logger == o.enable_daily_logger &&
          enable_prejoin_ui == o.enable_prejoin_ui &&
          enable_live_captions_ui == o.enable_live_captions_ui &&
          enable_network_ui == o.enable_network_ui &&
          disable_rate_limiting == o.disable_rate_limiting &&
          attach_callobject_to_window == o.attach_callobject_to_window
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [hide_daily_branding, redirect_on_meeting_exit, meeting_join_hook, hipaa, intercom_auto_record, intercom_manual_record, sfu_impl, sfu_switchover, switchover_impl, lang, webhook_meeting_end, recordings_bucket, max_live_streams, max_streaming_instances_per_room, enable_daily_logger, enable_prejoin_ui, enable_live_captions_ui, enable_network_ui, disable_rate_limiting, attach_callobject_to_window].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Daily.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
