=begin
#Daily API

#The Daily REST API offers the ability to manage the following:  - Overall Domain Configuration - Individual Room creation and config management  - Meeting token creation and validation - Recording and compositing management  - Meeting analytics - Logs and metrics - Real-time presence  Please reach out to help@daily.co if we can help with anything

The version of the OpenAPI document: 1.1.1
Contact: help@daily.co
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'date'
require 'time'

module Daily
  class DomainProperties
    # Property that gives end users a richer chat experience. This includes:  * Emoji reactions to chat messages * Emoji picker in the chat input form * Ability to send a Giphy chat message  ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object.
    attr_accessor :enable_advanced_chat

    # Determines if [Daily Prebuilt](/guides/products/prebuilt) displays the People UI. When set to true, a People button in the call tray reveals a People tab in the call sidebar. The tab lists all participants, and next to each name indicates audio status and an option to pin the participant. When `enable_people_ui` is set to false, the button and tab are hidden.  ⚠️ Has no effect on custom calls built on the Daily [call object](/guides/products/call-object).
    attr_accessor :enable_people_ui

    # Sets whether rooms for this domain can use [Daily Prebuilt](https://www.daily.co/prebuilt)'s Picture in Picture controls. When set to `true`, an additional button will be available in Daily Prebuilt's UI to toggle the Picture in Picture feature.  ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object.
    attr_accessor :enable_pip_ui

    # Determines if [Daily Prebuilt](https://www.daily.co/prebuilt) displays the Emoji Reactions UI. When set to `true`, a Reactions button appears in the call tray. This button allows users to select and send a reaction into the call. When set to `false`, the Reactions button is hidden and the feature is disabled.  Usage: This feature is a good fit for meetings when a host or presenter would benefit from receiving nonverbal cues from the audience. It's also great to keep meetings fun.  ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object.
    attr_accessor :enable_emoji_reactions

    # Sets whether the participants in the room can use [Daily Prebuilt](https://www.daily.co/prebuilt)'s hand raising controls. When set to `true`, an additional button will be available in Daily Prebuilt's UI to toggle a hand raise.  ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object.
    attr_accessor :enable_hand_raising

    # Determines whether participants enter a waiting room with a camera, mic, and browser check before joining a call in any room under this domain.   ⚠️ You must be using [Daily Prebuilt](https://daily.co/blog/daily-prebuilt-video-chat) to use `enable_prejoin_ui`.
    attr_accessor :enable_prejoin_ui

    # Sets whether rooms for this domain have [Daily Prebuilt](https://www.daily.co/prebuilt)’s breakout rooms feature enabled. When set to `true`, an owner in a Prebuilt call can create breakout rooms to divide participants into smaller, private groups.   ⚠️ You must be using [Daily Prebuilt](https://daily.co/blog/daily-prebuilt-video-chat) to use `enable_breakout_rooms`.  ⚠️ This property is in beta.
    attr_accessor :enable_breakout_rooms

    # Sets whether participants in a room see a closed captions button in their Daily Prebuilt call tray. When the closed caption button is clicked, closed captions are displayed locally.  When set to `true`, a closed captions button appears in the call tray. When set to `false`, the closed captions button is hidden from the call tray.  Note: Transcription must be enabled for the room or users must have permission to start transcription for this feature to be enabled. View the [transcription guide](/guides/products/transcription) for more details.  ⚠️ You must be using [Daily Prebuilt](https://daily.co/blog/daily-prebuilt-video-chat) to use `enable_live_captions_ui`.
    attr_accessor :enable_live_captions_ui

    # Determines whether the network button, and the network panel it reveals on click, appears across all rooms belonging to this domain.   ⚠️ You must be using [Daily Prebuilt](https://daily.co/blog/daily-prebuilt-video-chat) to use `enable_network_ui`.
    attr_accessor :enable_network_ui

    # Determines whether Daily Prebuilt displays noise cancellation controls. When set to `true`, a participant can enable microphone noise cancellation during a Daily Prebuilt call. ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object. To learn more about adding noise cancellation to a custom application, see the [`updateInputSettings()` docs](/reference/daily-js/instance-methods/update-input-settings).
    attr_accessor :enable_noise_cancellation_ui

    # Determines whether Daily Prebuilt displays background blur controls. When set to `true`, a participant can enable blur during a Daily Prebuilt call.   ⚠️ This flag only applies to Daily Prebuilt. It has no effect when building custom video applications with the Daily call object.
    attr_accessor :enable_video_processing_ui

    # Whether \"Powered by Daily\" displays in the in-call UI.
    attr_accessor :hide_daily_branding

    # (For meetings that open in a separate browser tab.) When a user clicks on the in-call menu bar's \"leave meeting\" button, the browser loads this URL. A query string that includes a parameter of the form `recent-call=<domain>/<room>` is appended to the URL. On mobile, you can redirect to a deep link to bring a user back into your app.
    attr_accessor :redirect_on_meeting_exit

    # Email us at help@daily.co to turn on HIPAA. Learn more about [our HIPAA compliance](https://www.daily.co/hipaa-compliance).
    attr_accessor :hipaa

    # Whether to automatically start recording when an Intercom support agent joins an Intercom-created call. Please see our [Intercom Messenger App page](https://www.daily.co/intercom) for more information.   ⚠️This method is read-only; please contact us if you'd like to enable intercom call auto-recording.
    attr_accessor :intercom_auto_record

    # The default language for the video call UI, for all calls.   If you set the language at this domain level, you can still override the setting for specific rooms in [a room's configuration properties](/reference/rest-api/rooms/config), or for a specific participant in a [meeting token](/reference/rest-api/meeting-tokens/config).   You can also set the language dynamically using the front-end library [setDailyLang() method](/reference/daily-js/instance-methods/set-daily-lang).  `*` Norwegian `\"no\"` and Russian `\"ru\"` are only available in the new Daily Prebuilt.
    attr_accessor :lang

    # Sets a URL that will receive a webhook when a user joins a room.  ⚠️ In place of the `meeting_join_hook`, we recommend setting up a [webhook](/reference/rest-api/webhooks) and listening for the [`participant.joined`](/reference/rest-api/webhooks/events/participant-joined) event.
    attr_accessor :meeting_join_hook

    # Daily uses signaling servers to manage all of the participants in a given call session. In an SFU/server mode call, the server will send and receive all audio and video from each participant. In a peer-to-peer call, each participant sends media directly to and from each other peer, but a signaling server still manages call state.  Daily runs servers in several different AWS regions to minimize latency for users around the world. The job of 'picking' a call server is handled when the first participant joins a room. The first participant's browser connects to a call server using Amazon's Route 53 DNS resolution, which chooses a server in the region closest to them.  This isn't always optimal. For example, if one person joins in London, and then ten more people join from Cape Town, the call will still be hosted out of `eu-west-2` . The majority of the participants will have higher latency to the server than if one of them had joined first and the call was being hosted in `af-south-1`. In cases like this, you may want to configure your domain (or a specific room) to always choose a call server in a specific AWS region.  Available regions: - `\"af-south-1\"` (Cape Town) - `\"ap-northeast-2\"` (Seoul) - `\"ap-southeast-1\"` (Singapore) - `\"ap-southeast-2\"` (Sydney) - `\"ap-south-1\"` (Mumbai) - `\"eu-central-1\"` (Frankfurt) - `\"eu-west-2\"` (London) - `\"sa-east-1\"` (São Paulo) - `\"us-east-1\"` (N. Virginia) - `\"us-west-2\"` (Oregon)
    attr_accessor :geo

    # Used to select the region where an RTMP stream should originate. In cases where RTMP streaming services aren't available in the desired region, we'll attempt to fall back to the default region based on the SFU being used for the meeting.    Available regions:   - `\"us-west-2\"` (Oregon)   - `\"eu-central-1\"` (Frankfurt)   - `\"ap-south-1\"` (Mumbai)    The default regions are grouped based on the SFU region like so:   - RTMP region `\"us-west-2\"` includes SFU regions: `\"us-west-2\"`, `\"us-east-1\"`, `\"sa-east-1\"`   - RTMP region `\"eu-central-1\"` includes SFU regions: `\"eu-central-1\"`, `\"eu-west-2\"`, `\"af-south-1\"`   - RTMP region `\"ap-south-1\"` includes SFU regions: `\"ap-southeast-1\"`, `\"ap-southeast-2\"`, `\"ap-northeast-2\"`, `\"ap-south-1\"`
    attr_accessor :rtmp_geo

    # Disable the fall back behavior of rtmp_geo. When rtmp_geo is set, we first try to connect to a media server in desired region. If a media server is not available in the desired region, we fall back to default region based on SFU's region. This property disables this automatic fall back. When this property is set, we will trigger a recording/streaming error event when media worker is unavailable. Also, the client should retry recording/streaming.
    attr_accessor :disable_rtmp_geo_fallback

    # Reduces the volume of log messages. This feature should be enabled when there are more than 200 participants in a meeting to help improve performance.  See our [guides for supporting large experiences](/guides/scaling-calls) for additional instruction.
    attr_accessor :enable_terse_logging

    # Live transcriptions generated can be saved as WebVTT. This flag controls if transcription started with [`startTranscription()`](/reference/daily-js/instance-methods/start-transcription) should be saved or not.
    attr_accessor :enable_transcription_storage

    attr_accessor :transcription_bucket

    # Cloud recordings are stored in either Daily's S3 bucket or the customer's own S3 bucket. By default recordings are stored as `{domain_name}/{room_name}/{epoch_time}`. Sometimes, the use case may call for custom recording file names to be used (for example, if you'd like to enforce the presence of the .mp4 extension in the file name).  `recordings_template` is made up of a replacement string with prefixes, suffixes, or both. The currently supported replacements are:   - `epoch_time`: The epoch time in seconds (mandatory)   - `domain_name`: Your Daily domain (optional)   - `room_name`: The name of the room which is getting recorded (optional)   - `mtg_session_id`: The ID of the meeting session which is getting recorded (optional)   - `instance_id`: The instance ID of the recording (optional)   - `recording_id`: The recording ID of the recording (optional)    The restrictions for defining a recording template are as follows:   - The `epoch_time` tag is mandatory to ensure the recording file name is unique under all conditions   - The maximum size of the template is 1024 characters   - Each replacement parameter should be placed within a curly bracket (e.g., `{domain_name}`)   - Only alphanumeric characters `(0-9, A-Z, a-z)` and `.`, `/`, `-`, `_` are valid within the template   - `.mp4` is the only valid extension  Examples - Example domain: \"myDomain\" - Example room: \"myRoom\"  Example 1: - Template: `myprefix-{domain_name}-{epoch_time}.mp4` - Resulting file name: `myprefix-myDomain-1675842936274.mp4`  Example 2: - Template: `{room_name}/{instance_id}/{epoch_time}` - Resulting room name: `myRoom/d529cd2f-fbcc-4fb7-b2c0-c4995b1162b6/1675842936274`
    attr_accessor :recordings_template

    # Configures a room to use multiple SFUs for a call's media. This feature enables calls to scale to large sizes and to reduce latency between participants. It is recommended specifically for interactive live streaming.  See our [guide for interactive live streaming](/guides/scaling-calls/interactive-live-streaming-rtmp-output#daily-prebuilt-configurations-to-support-100-000-participants) for additional instruction.
    attr_accessor :enable_mesh_sfu

    # Dictates the participant count after which room topology automatically switches from Peer-to-Peer (P2P) to Selective Forwarding Unit (SFU) mode, or vice versa.  For example, if `sfu_switchover` is set to `2` and the current network topology is P2P, the topology will switch to SFU mode when the _third_ participant joins the call. If the current topology is SFU, it will switch to P2P mode when the participant count decreases from `2` to `1`.  We recommend specifying an integer value for this property except for cases where you would like the room to switch to SFU mode as soon as the first participant joins. In this case, set `sfu_switchover` to `0.5`.  See our [guide about video call architecture](/guides/architecture-and-monitoring/intro-to-video-arch#the-architecture-of-a-room-p2p-vs-sfu-calls) for additional information.
    attr_accessor :sfu_switchover

    # Configures a domain or room to use [Daily Adaptive Bitrate](/guides/building-additional-features/daily-adaptive-bitrate). When enabled, along with configuring the client to [`allowAdaptiveLayers`](/reference/daily-js/instance-methods/update-send-settings#sendsettings), the Daily client will continually adapt send settings to the current network conditions. `allowAdaptiveLayers` is `true` by default; if you haven't modified that setting, then setting `enable_adaptive_simulcast` to `true` will enable Daily Adaptive Bitrate for 1:1 calls.
    attr_accessor :enable_adaptive_simulcast

    # Configures a domain or room to disallow multiple participants from having the same `user_id`. This feature can be enabled to prevent users from \"sharing\" meeting tokens. When enabled, a participant joining or reconnecting to a meeting will cause existing participants with the same user_id to be ejected.
    attr_accessor :enforce_unique_user_ids

    attr_accessor :recordings_bucket

    attr_accessor :permissions

    # Defines a custom S3 bucket where the batch processor will write its output
    attr_accessor :batch_processor_bucket

    # Enables the use of Opus in-band FEC (Forward Error Correction) when encoding audio to send, where possible. This can make audio quality more resilient to packet loss.
    attr_accessor :enable_opus_fec

    # [SIP Interconnect and Pinless Dialin](/guides/products/dial-in-dial-out/dialin-pinless#provisioning-sip-interconnect-and-pinless-dialin-workflow),i.e., without entering a PIN code when dialling a phone number or directly calling a Daily SIP Interconnect address. In this case you dont need a SIP address associated to a particular Daily Room.   When a call comes in to this phone number or to the sip interconnect address, it will trigger a webhook, where you'll need to create the Daily room and forward the call to the `sipUri` assocaited to the newly created room.   The Pinless Dialin only works with purchased phone numbers, because the call is not intended for a particular Daily room. Read more details on our [dosc-site](/guides/products/dial-in-dial-out/dialin-pinless).
    attr_accessor :pinless_dialin

    # Dialin with a [PIN code](/guides/products/dial-in-dial-out/dialin-pin). This works with both the Global phone numbers and any number that you purchased. When a call comes into one of the phone numbers, the dialer must enter the PIN code. If the code is correct, the user will be connected to the Daily Room. Otherwise the incoming call will be disconnected if an incorrect PIN code is entered.
    attr_accessor :pin_dialin

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_advanced_chat' => :'enable_advanced_chat',
        :'enable_people_ui' => :'enable_people_ui',
        :'enable_pip_ui' => :'enable_pip_ui',
        :'enable_emoji_reactions' => :'enable_emoji_reactions',
        :'enable_hand_raising' => :'enable_hand_raising',
        :'enable_prejoin_ui' => :'enable_prejoin_ui',
        :'enable_breakout_rooms' => :'enable_breakout_rooms',
        :'enable_live_captions_ui' => :'enable_live_captions_ui',
        :'enable_network_ui' => :'enable_network_ui',
        :'enable_noise_cancellation_ui' => :'enable_noise_cancellation_ui',
        :'enable_video_processing_ui' => :'enable_video_processing_ui',
        :'hide_daily_branding' => :'hide_daily_branding',
        :'redirect_on_meeting_exit' => :'redirect_on_meeting_exit',
        :'hipaa' => :'hipaa',
        :'intercom_auto_record' => :'intercom_auto_record',
        :'lang' => :'lang',
        :'meeting_join_hook' => :'meeting_join_hook',
        :'geo' => :'geo',
        :'rtmp_geo' => :'rtmp_geo',
        :'disable_rtmp_geo_fallback' => :'disable_rtmp_geo_fallback',
        :'enable_terse_logging' => :'enable_terse_logging',
        :'enable_transcription_storage' => :'enable_transcription_storage',
        :'transcription_bucket' => :'transcription_bucket',
        :'recordings_template' => :'recordings_template',
        :'enable_mesh_sfu' => :'enable_mesh_sfu',
        :'sfu_switchover' => :'sfu_switchover',
        :'enable_adaptive_simulcast' => :'enable_adaptive_simulcast',
        :'enforce_unique_user_ids' => :'enforce_unique_user_ids',
        :'recordings_bucket' => :'recordings_bucket',
        :'permissions' => :'permissions',
        :'batch_processor_bucket' => :'batch_processor_bucket',
        :'enable_opus_fec' => :'enable_opus_fec',
        :'pinless_dialin' => :'pinless_dialin',
        :'pin_dialin' => :'pin_dialin'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'enable_advanced_chat' => :'Boolean',
        :'enable_people_ui' => :'Boolean',
        :'enable_pip_ui' => :'Boolean',
        :'enable_emoji_reactions' => :'Boolean',
        :'enable_hand_raising' => :'Boolean',
        :'enable_prejoin_ui' => :'Boolean',
        :'enable_breakout_rooms' => :'Boolean',
        :'enable_live_captions_ui' => :'Boolean',
        :'enable_network_ui' => :'Boolean',
        :'enable_noise_cancellation_ui' => :'Boolean',
        :'enable_video_processing_ui' => :'Boolean',
        :'hide_daily_branding' => :'Boolean',
        :'redirect_on_meeting_exit' => :'String',
        :'hipaa' => :'Boolean',
        :'intercom_auto_record' => :'Boolean',
        :'lang' => :'String',
        :'meeting_join_hook' => :'String',
        :'geo' => :'String',
        :'rtmp_geo' => :'String',
        :'disable_rtmp_geo_fallback' => :'Boolean',
        :'enable_terse_logging' => :'Boolean',
        :'enable_transcription_storage' => :'Boolean',
        :'transcription_bucket' => :'TranscriptionBucket',
        :'recordings_template' => :'String',
        :'enable_mesh_sfu' => :'Boolean',
        :'sfu_switchover' => :'Float',
        :'enable_adaptive_simulcast' => :'Boolean',
        :'enforce_unique_user_ids' => :'Boolean',
        :'recordings_bucket' => :'RecordingsBucket',
        :'permissions' => :'Permissions',
        :'batch_processor_bucket' => :'Object',
        :'enable_opus_fec' => :'Boolean',
        :'pinless_dialin' => :'Array<PinlessDialinInner>',
        :'pin_dialin' => :'Array<PinDialinInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Daily::DomainProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Daily::DomainProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enable_advanced_chat')
        self.enable_advanced_chat = attributes[:'enable_advanced_chat']
      else
        self.enable_advanced_chat = false
      end

      if attributes.key?(:'enable_people_ui')
        self.enable_people_ui = attributes[:'enable_people_ui']
      else
        self.enable_people_ui = true
      end

      if attributes.key?(:'enable_pip_ui')
        self.enable_pip_ui = attributes[:'enable_pip_ui']
      else
        self.enable_pip_ui = false
      end

      if attributes.key?(:'enable_emoji_reactions')
        self.enable_emoji_reactions = attributes[:'enable_emoji_reactions']
      else
        self.enable_emoji_reactions = false
      end

      if attributes.key?(:'enable_hand_raising')
        self.enable_hand_raising = attributes[:'enable_hand_raising']
      else
        self.enable_hand_raising = false
      end

      if attributes.key?(:'enable_prejoin_ui')
        self.enable_prejoin_ui = attributes[:'enable_prejoin_ui']
      else
        self.enable_prejoin_ui = true
      end

      if attributes.key?(:'enable_breakout_rooms')
        self.enable_breakout_rooms = attributes[:'enable_breakout_rooms']
      else
        self.enable_breakout_rooms = false
      end

      if attributes.key?(:'enable_live_captions_ui')
        self.enable_live_captions_ui = attributes[:'enable_live_captions_ui']
      else
        self.enable_live_captions_ui = false
      end

      if attributes.key?(:'enable_network_ui')
        self.enable_network_ui = attributes[:'enable_network_ui']
      else
        self.enable_network_ui = false
      end

      if attributes.key?(:'enable_noise_cancellation_ui')
        self.enable_noise_cancellation_ui = attributes[:'enable_noise_cancellation_ui']
      else
        self.enable_noise_cancellation_ui = true
      end

      if attributes.key?(:'enable_video_processing_ui')
        self.enable_video_processing_ui = attributes[:'enable_video_processing_ui']
      else
        self.enable_video_processing_ui = true
      end

      if attributes.key?(:'hide_daily_branding')
        self.hide_daily_branding = attributes[:'hide_daily_branding']
      else
        self.hide_daily_branding = false
      end

      if attributes.key?(:'redirect_on_meeting_exit')
        self.redirect_on_meeting_exit = attributes[:'redirect_on_meeting_exit']
      end

      if attributes.key?(:'hipaa')
        self.hipaa = attributes[:'hipaa']
      else
        self.hipaa = false
      end

      if attributes.key?(:'intercom_auto_record')
        self.intercom_auto_record = attributes[:'intercom_auto_record']
      end

      if attributes.key?(:'lang')
        self.lang = attributes[:'lang']
      else
        self.lang = 'en'
      end

      if attributes.key?(:'meeting_join_hook')
        self.meeting_join_hook = attributes[:'meeting_join_hook']
      else
        self.meeting_join_hook = 'NULL'
      end

      if attributes.key?(:'geo')
        self.geo = attributes[:'geo']
      else
        self.geo = 'NULL'
      end

      if attributes.key?(:'rtmp_geo')
        self.rtmp_geo = attributes[:'rtmp_geo']
      else
        self.rtmp_geo = 'The closest available region to the SFU region used by the meeting.'
      end

      if attributes.key?(:'disable_rtmp_geo_fallback')
        self.disable_rtmp_geo_fallback = attributes[:'disable_rtmp_geo_fallback']
      else
        self.disable_rtmp_geo_fallback = false
      end

      if attributes.key?(:'enable_terse_logging')
        self.enable_terse_logging = attributes[:'enable_terse_logging']
      else
        self.enable_terse_logging = false
      end

      if attributes.key?(:'enable_transcription_storage')
        self.enable_transcription_storage = attributes[:'enable_transcription_storage']
      else
        self.enable_transcription_storage = false
      end

      if attributes.key?(:'transcription_bucket')
        self.transcription_bucket = attributes[:'transcription_bucket']
      end

      if attributes.key?(:'recordings_template')
        self.recordings_template = attributes[:'recordings_template']
      else
        self.recordings_template = '{domain_name}/{room_name}/{epoch_time}.'
      end

      if attributes.key?(:'enable_mesh_sfu')
        self.enable_mesh_sfu = attributes[:'enable_mesh_sfu']
      end

      if attributes.key?(:'sfu_switchover')
        self.sfu_switchover = attributes[:'sfu_switchover']
      else
        self.sfu_switchover = 0.5
      end

      if attributes.key?(:'enable_adaptive_simulcast')
        self.enable_adaptive_simulcast = attributes[:'enable_adaptive_simulcast']
      else
        self.enable_adaptive_simulcast = true
      end

      if attributes.key?(:'enforce_unique_user_ids')
        self.enforce_unique_user_ids = attributes[:'enforce_unique_user_ids']
      else
        self.enforce_unique_user_ids = false
      end

      if attributes.key?(:'recordings_bucket')
        self.recordings_bucket = attributes[:'recordings_bucket']
      end

      if attributes.key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end

      if attributes.key?(:'batch_processor_bucket')
        self.batch_processor_bucket = attributes[:'batch_processor_bucket']
      end

      if attributes.key?(:'enable_opus_fec')
        self.enable_opus_fec = attributes[:'enable_opus_fec']
      end

      if attributes.key?(:'pinless_dialin')
        if (value = attributes[:'pinless_dialin']).is_a?(Array)
          self.pinless_dialin = value
        end
      end

      if attributes.key?(:'pin_dialin')
        if (value = attributes[:'pin_dialin']).is_a?(Array)
          self.pin_dialin = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      lang_validator = EnumAttributeValidator.new('String', ["da", "de", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pt", "pt-BR", "pl", "ru", "sv", "tr", "user", "unknown_default_open_api"])
      return false unless lang_validator.valid?(@lang)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lang Object to be assigned
    def lang=(lang)
      validator = EnumAttributeValidator.new('String', ["da", "de", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pt", "pt-BR", "pl", "ru", "sv", "tr", "user", "unknown_default_open_api"])
      unless validator.valid?(lang)
        fail ArgumentError, "invalid value for \"lang\", must be one of #{validator.allowable_values}."
      end
      @lang = lang
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_advanced_chat == o.enable_advanced_chat &&
          enable_people_ui == o.enable_people_ui &&
          enable_pip_ui == o.enable_pip_ui &&
          enable_emoji_reactions == o.enable_emoji_reactions &&
          enable_hand_raising == o.enable_hand_raising &&
          enable_prejoin_ui == o.enable_prejoin_ui &&
          enable_breakout_rooms == o.enable_breakout_rooms &&
          enable_live_captions_ui == o.enable_live_captions_ui &&
          enable_network_ui == o.enable_network_ui &&
          enable_noise_cancellation_ui == o.enable_noise_cancellation_ui &&
          enable_video_processing_ui == o.enable_video_processing_ui &&
          hide_daily_branding == o.hide_daily_branding &&
          redirect_on_meeting_exit == o.redirect_on_meeting_exit &&
          hipaa == o.hipaa &&
          intercom_auto_record == o.intercom_auto_record &&
          lang == o.lang &&
          meeting_join_hook == o.meeting_join_hook &&
          geo == o.geo &&
          rtmp_geo == o.rtmp_geo &&
          disable_rtmp_geo_fallback == o.disable_rtmp_geo_fallback &&
          enable_terse_logging == o.enable_terse_logging &&
          enable_transcription_storage == o.enable_transcription_storage &&
          transcription_bucket == o.transcription_bucket &&
          recordings_template == o.recordings_template &&
          enable_mesh_sfu == o.enable_mesh_sfu &&
          sfu_switchover == o.sfu_switchover &&
          enable_adaptive_simulcast == o.enable_adaptive_simulcast &&
          enforce_unique_user_ids == o.enforce_unique_user_ids &&
          recordings_bucket == o.recordings_bucket &&
          permissions == o.permissions &&
          batch_processor_bucket == o.batch_processor_bucket &&
          enable_opus_fec == o.enable_opus_fec &&
          pinless_dialin == o.pinless_dialin &&
          pin_dialin == o.pin_dialin
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [enable_advanced_chat, enable_people_ui, enable_pip_ui, enable_emoji_reactions, enable_hand_raising, enable_prejoin_ui, enable_breakout_rooms, enable_live_captions_ui, enable_network_ui, enable_noise_cancellation_ui, enable_video_processing_ui, hide_daily_branding, redirect_on_meeting_exit, hipaa, intercom_auto_record, lang, meeting_join_hook, geo, rtmp_geo, disable_rtmp_geo_fallback, enable_terse_logging, enable_transcription_storage, transcription_bucket, recordings_template, enable_mesh_sfu, sfu_switchover, enable_adaptive_simulcast, enforce_unique_user_ids, recordings_bucket, permissions, batch_processor_bucket, enable_opus_fec, pinless_dialin, pin_dialin].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Daily.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
