=begin
#Daily

#The official library for communicating with the Daily REST API.

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module Daily
  class MeetingTokenRequestProperties
    attr_accessor :room_name

    attr_accessor :eject_at_token_exp

    attr_accessor :nbf

    attr_accessor :exp

    attr_accessor :is_owner

    attr_accessor :user_name

    attr_accessor :user_id

    attr_accessor :enable_screenshare

    attr_accessor :start_video_off

    attr_accessor :start_audio_off

    attr_accessor :enable_recording

    attr_accessor :enable_prejoin_ui

    attr_accessor :enable_live_captions_ui

    attr_accessor :enable_recording_ui

    attr_accessor :enable_terse_logging

    attr_accessor :auto_start_transcription

    attr_accessor :close_tab_on_exit

    attr_accessor :redirect_on_meeting_exit

    attr_accessor :lang

    attr_accessor :permissions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'room_name' => :'room_name',
        :'eject_at_token_exp' => :'eject_at_token_exp',
        :'nbf' => :'nbf',
        :'exp' => :'exp',
        :'is_owner' => :'is_owner',
        :'user_name' => :'user_name',
        :'user_id' => :'user_id',
        :'enable_screenshare' => :'enable_screenshare',
        :'start_video_off' => :'start_video_off',
        :'start_audio_off' => :'start_audio_off',
        :'enable_recording' => :'enable_recording',
        :'enable_prejoin_ui' => :'enable_prejoin_ui',
        :'enable_live_captions_ui' => :'enable_live_captions_ui',
        :'enable_recording_ui' => :'enable_recording_ui',
        :'enable_terse_logging' => :'enable_terse_logging',
        :'auto_start_transcription' => :'auto_start_transcription',
        :'close_tab_on_exit' => :'close_tab_on_exit',
        :'redirect_on_meeting_exit' => :'redirect_on_meeting_exit',
        :'lang' => :'lang',
        :'permissions' => :'permissions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'room_name' => :'String',
        :'eject_at_token_exp' => :'Boolean',
        :'nbf' => :'Integer',
        :'exp' => :'Integer',
        :'is_owner' => :'Boolean',
        :'user_name' => :'String',
        :'user_id' => :'String',
        :'enable_screenshare' => :'Boolean',
        :'start_video_off' => :'Boolean',
        :'start_audio_off' => :'Boolean',
        :'enable_recording' => :'String',
        :'enable_prejoin_ui' => :'Boolean',
        :'enable_live_captions_ui' => :'Boolean',
        :'enable_recording_ui' => :'Boolean',
        :'enable_terse_logging' => :'Boolean',
        :'auto_start_transcription' => :'Boolean',
        :'close_tab_on_exit' => :'Boolean',
        :'redirect_on_meeting_exit' => :'String',
        :'lang' => :'String',
        :'permissions' => :'MeetingTokenRequestPropertiesPermissions'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Daily::MeetingTokenRequestProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Daily::MeetingTokenRequestProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'room_name')
        self.room_name = attributes[:'room_name']
      else
        self.room_name = nil
      end

      if attributes.key?(:'eject_at_token_exp')
        self.eject_at_token_exp = attributes[:'eject_at_token_exp']
      end

      if attributes.key?(:'nbf')
        self.nbf = attributes[:'nbf']
      end

      if attributes.key?(:'exp')
        self.exp = attributes[:'exp']
      end

      if attributes.key?(:'is_owner')
        self.is_owner = attributes[:'is_owner']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'enable_screenshare')
        self.enable_screenshare = attributes[:'enable_screenshare']
      end

      if attributes.key?(:'start_video_off')
        self.start_video_off = attributes[:'start_video_off']
      end

      if attributes.key?(:'start_audio_off')
        self.start_audio_off = attributes[:'start_audio_off']
      end

      if attributes.key?(:'enable_recording')
        self.enable_recording = attributes[:'enable_recording']
      end

      if attributes.key?(:'enable_prejoin_ui')
        self.enable_prejoin_ui = attributes[:'enable_prejoin_ui']
      end

      if attributes.key?(:'enable_live_captions_ui')
        self.enable_live_captions_ui = attributes[:'enable_live_captions_ui']
      end

      if attributes.key?(:'enable_recording_ui')
        self.enable_recording_ui = attributes[:'enable_recording_ui']
      end

      if attributes.key?(:'enable_terse_logging')
        self.enable_terse_logging = attributes[:'enable_terse_logging']
      end

      if attributes.key?(:'auto_start_transcription')
        self.auto_start_transcription = attributes[:'auto_start_transcription']
      end

      if attributes.key?(:'close_tab_on_exit')
        self.close_tab_on_exit = attributes[:'close_tab_on_exit']
      end

      if attributes.key?(:'redirect_on_meeting_exit')
        self.redirect_on_meeting_exit = attributes[:'redirect_on_meeting_exit']
      end

      if attributes.key?(:'lang')
        self.lang = attributes[:'lang']
      end

      if attributes.key?(:'permissions')
        self.permissions = attributes[:'permissions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @room_name.nil?
        invalid_properties.push('invalid value for "room_name", room_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @room_name.nil?
      enable_recording_validator = EnumAttributeValidator.new('String', ["local", "cloud", "raw-tracks", "unknown_default_open_api"])
      return false unless enable_recording_validator.valid?(@enable_recording)
      lang_validator = EnumAttributeValidator.new('String', ["de", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pt", "pt-BR", "pl", "ru", "sv", "tr", "user", "unknown_default_open_api"])
      return false unless lang_validator.valid?(@lang)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_recording Object to be assigned
    def enable_recording=(enable_recording)
      validator = EnumAttributeValidator.new('String', ["local", "cloud", "raw-tracks", "unknown_default_open_api"])
      unless validator.valid?(enable_recording)
        fail ArgumentError, "invalid value for \"enable_recording\", must be one of #{validator.allowable_values}."
      end
      @enable_recording = enable_recording
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lang Object to be assigned
    def lang=(lang)
      validator = EnumAttributeValidator.new('String', ["de", "en", "es", "fi", "fr", "it", "jp", "ka", "nl", "no", "pt", "pt-BR", "pl", "ru", "sv", "tr", "user", "unknown_default_open_api"])
      unless validator.valid?(lang)
        fail ArgumentError, "invalid value for \"lang\", must be one of #{validator.allowable_values}."
      end
      @lang = lang
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          room_name == o.room_name &&
          eject_at_token_exp == o.eject_at_token_exp &&
          nbf == o.nbf &&
          exp == o.exp &&
          is_owner == o.is_owner &&
          user_name == o.user_name &&
          user_id == o.user_id &&
          enable_screenshare == o.enable_screenshare &&
          start_video_off == o.start_video_off &&
          start_audio_off == o.start_audio_off &&
          enable_recording == o.enable_recording &&
          enable_prejoin_ui == o.enable_prejoin_ui &&
          enable_live_captions_ui == o.enable_live_captions_ui &&
          enable_recording_ui == o.enable_recording_ui &&
          enable_terse_logging == o.enable_terse_logging &&
          auto_start_transcription == o.auto_start_transcription &&
          close_tab_on_exit == o.close_tab_on_exit &&
          redirect_on_meeting_exit == o.redirect_on_meeting_exit &&
          lang == o.lang &&
          permissions == o.permissions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [room_name, eject_at_token_exp, nbf, exp, is_owner, user_name, user_id, enable_screenshare, start_video_off, start_audio_off, enable_recording, enable_prejoin_ui, enable_live_captions_ui, enable_recording_ui, enable_terse_logging, auto_start_transcription, close_tab_on_exit, redirect_on_meeting_exit, lang, permissions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Daily.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
